package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"strings"
)

// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

// curl --location --request GET '127.0.0.1:8080/de-short/WSf64LaTwN' \
// --header 'Content-Type: application/json' \
// --header 'Cookie: PHPSESSID=fm29ht979jqors87smr9b38sd6' \
// --data-raw '{"urlToShorten":"https://yourbasic.org/golang/structs-explained/","expireDate":"2023-03-01"}'

type Payload struct {
	URLToShorten string `json:"urlToShorten"`
	ExpireDate   string `json:"expireDate"`
}

func callShortedUrl(count int) {
	data := Payload{
		// fill struct
	}
	payloadBytes, err := json.Marshal(data)
	if err != nil {
		// handle err
	}
	body := bytes.NewReader(payloadBytes)

	req, err := http.NewRequest("GET", "http://127.0.0.1:8080/de-short/Byxbc", body)
	if err != nil {
		fmt.Println(err)
	}
	req.Header.Set("Content-Type", "application/json")
	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		fmt.Println(err)
		fmt.Println(resp)
	}
}
func createShortedUrl() {
	client := &http.Client{}
	var data = strings.NewReader(`{"urlToShorten":"https://yourbasic.org/golang/structs-explained/","expireDate":"2023-02-09T00:00:00Z"}`)
	req, err := http.NewRequest("POST", "http://127.0.0.1:8080/shorten", data)
	if err != nil {
		log.Fatal(err)
	}
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Cookie", "PHPSESSID=0tjglci5j9bjjrp5ajirhaercr")
	resp, err := client.Do(req)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()
	bodyText, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Printf("%s\n", bodyText)
}
